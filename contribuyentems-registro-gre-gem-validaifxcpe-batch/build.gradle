buildscript {
  repositories {
    mavenLocal()
    maven {
      url "${sunatPUrepo}libs-release"
      credentials {
        username = "${sunatPUrepoUser}"
        password = "${sunatPUrepoPassword}"
      }
    }
  }
  dependencies {
    classpath "pe.gob.sunat.dev.plugin.ms:gen-ms-dev-plugin:0.0.1.1"
    classpath("org.codehaus.groovy.modules.http-builder:http-builder:0.6") {
        exclude group: "org.codehaus.groovy", module: "groovy"
    }
    classpath(group: "org.codehaus.groovy", name: "groovy", version: "2.1.0")

    classpath("org.hidetake:gradle-ssh-plugin:2.9.0")
  }
}

apply plugin: 'application'
apply plugin: 'pe.gob.sunat.dev.plugin.ms'

mainClassName = 'pe.gob.sunat.contribuyentems.registro.gre.emision.main.EmisionBatchApplication'

repositories {
  mavenLocal()
  maven {
    url "${sunatPUrepo}libs-release"
    credentials {
      username = "${sunatPUrepoUser}"
      password = "${sunatPUrepoPassword}"
    }
  }
}

dependencies {
  ['views','views-freemarker','client'].each {
    compile "io.dropwizard:dropwizard-${it}:1.3.14"
  }
    compile('tecnologiams.arquitectura:tecnologiams-arquitectura-framework-elk:2.0.0')
    compile('procesos.tecnologia3.arquitectura:tecnologia3-arquitectura-framework-kafka:1.14.1')
    compile ('contribuyentems.registro:contribuyentems-registro-gre-shared-backend-lib:1.0.1-1')
    compile ('contribuyentems.registro:contribuyentems-registro-gre-basebdgre-lib:1.0.4-3')
    
  testImplementation 'io.dropwizard:dropwizard-testing:1.2.4'
  testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.5'
  testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.5'
}


test {
  finalizedBy jacocoTestReport
}
jacocoTestReport {
  dependsOn test
  reports {
    xml.enabled true
    html.enabled true
  }

  test {
    jacoco {
      destinationFile = file("$buildDir/jacoco/test.exec")
      classDumpDir = file("$buildDir/jacoco/classpathdumps")
      excludes = [
          'pe.gob.sunat.contribuyentems.registro.rhe.emision.infrastructure.*',
          'pe.gob.sunat.contribuyentems.registro.rhe.emision.main.*',
          'pe.gob.sunat.contribuyentems.registro.rhe.emision.shared.*',
          'pe.gob.sunat.contribuyentems.registro.rhe.emision.business.mapper.*',
          'pe.gob.sunat.contribuyentems.registro.rhe.emision.business.domain.*'
      ]
    }
  }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it,
          exclude: [
              '**/base/**'
          ])
    })
  }
}
sonarqube {
  properties {
    property 'sonar.coverage.exclusions', [
        "**/pe/gob/sunat/contribuyentems/registro/rhe/emision/infrastructure/**",
        "**/pe/gob/sunat/contribuyentems/registro/rhe/emision/main/**",
        "**/pe/gob/sunat/contribuyentems/registro/rhe/emision/shared/**",
        "**/pe/gob/sunat/contribuyentems/registro/rhe/emision/business/domain/**",
        "**/pe/gob/sunat/contribuyentems/registro/rhe/emision/business/mapper/**"
    ]
    property 'sonar.jacoco.reportPath', "$buildDir/jacoco/test.exec"
        property "sonar.projectName", "contribuyentems-registro-rhe-emision-batch"
        property "sonar.projectKey", "contribuyentems-registro-rhe-emision-batch"
        property "sonar.projectVersion", '1.0.0'
        property 'sonar.jacoco.reportPath', "$buildDir/jacoco/test.exec"
        //property 'sonar.host.url', 'http://sonarqube.insi.sunat.peru:9000'
        property 'sonar.host.url', 'http://10.230.200.31:9000/'
        //property "sonar.login", "rop"
        //property "sonar.password", "canvia"
  }
}

// Promotion

import groovyx.net.http.HttpResponseDecorator
import groovyx.net.http.RESTClient
import org.apache.http.HttpHeaders
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*

class PromoteTask extends DefaultTask {
    PromoteTask() {
        group = "Promotion"
    }
    @Input
    def repoKey
    @Input
    def targetRepo
    @Input
    def dockerRepository
    @Input
    def tag
    @Input
    def username
    @Input
    def password
    @Input
    def contextUrl
    @Input
    def copy = true
    @TaskAction
    void promote() {
        URL url = new URL("$contextUrl/api/docker/$repoKey/v2/promote")
        URI uri = new URI(url.getProtocol(), url.getUserInfo(), url.getHost(), url.getPort(), url.getPath(), url.getQuery(), url.getRef())
        def http = new HTTPBuilder(uri.toString())
        http.setHeaders([Authorization: 'Basic ' + ("$username:$password".toString().bytes.encodeBase64())])
        println "Url: ${uri.toString()}"
        println "RepoKey: ${repoKey}"
        println "TargetRepo: ${targetRepo}"
        println "DockerRepository: ${dockerRepository}"
        println "Tag: ${tag}"
        http.request(POST) {
            requestContentType = JSON
            body = [
                    targetRepo      : targetRepo,
                    dockerRepository: dockerRepository,
                    tag             : tag, copy: copy]
            response.success = { resp ->
                println "POST response status: ${resp.statusLine}"
            }
            response.failure = { resp ->
                println "Request Failed: ${resp.statusLine}"
            }
        }
    }
}

task promoteToCalidad(type: PromoteTask) {
  repoKey = 'integracion1-dr-local'
  targetRepo = 'calidad1-dr-local'
  dockerRepository = 'microservices/' + deploymentName
  tag = version
  username = "${sunatPUrepoUser}"
  password = "${sunatPUrepoPassword}"
  contextUrl = 'http://artifactory.insi.sunat.peru:7003/artifactory'
}

task promoteToProduccion(type: PromoteTask) {
  repoKey = 'calidad1-dr-local'
  targetRepo = 'produccion1-dr-local'
  dockerRepository = 'microservices/' + deploymentName
  tag = version
  username = "${sunatPUrepoUser}"
  password = "${sunatPUrepoPassword}"
  contextUrl = 'http://artifactory.insi.sunat.peru:7003/artifactory'
}

// K8S Set New Image
// https://gradle-ssh-plugin.github.io/docs/
apply plugin: 'org.hidetake.ssh'
ssh.settings {
  knownHosts = allowAnyHosts
}

remotes {
    def e = System.getenv()
    integracion {
        host = e['bamboo_deployDesaK8STRIBUTOSS1A']
        user = e['bamboo_deployDesaK8STRIBUTOSS1Username']
        password = e['bamboo_deployDesaK8STRIBUTOSS1Password']
    }
    calidad5A {
        host = e['bamboo_deployQAK8STRIBUTOSS1A']
        user = e['bamboo_deployQAK8STRIBUTOSS1Username']
        password = e['bamboo_deployQAK8STRIBUTOSS1Password']
    }
    calidad5B {
        host = e['bamboo_deployQaIpSite5B']
        user = e['bamboo_deployQAK8STRIBUTOSS1Username']
        password = e['bamboo_deployQAK8STRIBUTOSS1Password']
    }
    calidad5C {
        host = e['bamboo_deployQaIpSite5C']
        user = e['bamboo_deployQAK8STRIBUTOSS1Username']
        password = e['bamboo_deployQAK8STRIBUTOSS1Password']
    }
    produccion1A {
        host = e['bamboo_deployProdK8STRIBUTOSS1A']
        user = e['bamboo_deployProdK8STRIBUTOSS1Username']
        password = e['bamboo_deployProdK8SRENTAS1Password']
    }
    produccion1B {
        host = e['bamboo_deployProdK8STRIBUTOSS1B']
        user = e['bamboo_deployProdK8STRIBUTOSS1Username']
        password = e['bamboo_deployProdK8SRENTAS1Password']
    }
    produccion1C {
        host = e['bamboo_deployProdK8STRIBUTOSS1C']
        user = e['bamboo_deployProdK8STRIBUTOSS1Username']
        password = e['bamboo_deployProdK8SRENTAS1Password']
    }
    produccion2A {
        host = e['bamboo_deployProdK8STRIBUTOSS2A']
        user = e['bamboo_deployProdK8STRIBUTOSS2Username']
        password = e['bamboo_deployProdK8STRIBUTOSS2Password']
    }
    produccion2B {
        host = e['bamboo_deployProdK8STRIBUTOSS2B']
        user = e['bamboo_deployProdK8STRIBUTOSS2Username']
        password = e['bamboo_deployProdK8STRIBUTOSS2Password']
    }
    produccion2C {
        host = e['bamboo_deployProdK8STRIBUTOSS2C']
        user = e['bamboo_deployProdK8STRIBUTOSS2Username']
        password = e['bamboo_deployProdK8STRIBUTOSS2Password']
    }
}
def despliegue(Object master, int numero, int site, String repoArtifactory) {
  boolean exito=false;  
  try {
        ssh.run {
            session(master) {
               execute "./start-microservice.sh $deploymentName $deploymentName  $projectName $version "+repoArtifactory
            }
        }
    exito=true;
    } catch (Exception e) {
        if (!System.getenv().TRAVIS) {
            System.err.println "** SSH error: ${e.message} - some tests will fail **"
           
        }
    if(numero==3 ){
      return e;
    }
    }
   return exito;
}
task setNewPublishDockerImageIntegracion {
  doLast {
    ssh.run {
      session(remotes.integracion) {
        execute "kubectl apply -f microservices/$deploymentName --record"
        execute "kubectl set image deployments/$deploymentName $deploymentName=integracion1-dr-local.artifactory.insi.sunat.peru/microservices/$projectName:$version"
      }
    }
  }
}
task setNewDockerImageIntegracion {
  doLast {
    ssh.run {
      session(remotes.integracion) {
        execute "kubectl set image deployments/$deploymentName $deploymentName=integracion1-dr-local.artifactory.insi.sunat.peru/microservices/$projectName:$version"
      }
    }
  }
}
task setNewDockerImageCalidad {
  doLast {
      String repo="calidad1-dr-local.artifactory.insi.sunat.peru"
      Object site3Error=null
      boolean exito = false;
      exito = despliegue(remotes.calidad5A,1,2,repo)
      if(!exito){
        exito = despliegue(remotes.calidad5B,2,2,repo)
        if(!exito){
          site3Error = despliegue(remotes.calidad5C,3,2,repo)
        }
      }
      if(site3Error!=null && site3Error !=true){
          throw site3Error
      }
  }
}
task setNewDockerImageProduccion {
  doLast {
    String repo="produccion1-dr-local.artifactory.insi.sunat.peru"
    boolean exito = despliegue(remotes.produccion1A,1,1,repo)
    Object site1Error=null
    Object site2Error=null
    if(!exito){
      exito = despliegue(remotes.produccion1B,2,1,repo)
      if(!exito){
        site1Error = despliegue(remotes.produccion1C,3,1,repo)
      }
    }
    exito = despliegue(remotes.produccion2A,1,2,repo)
    if(!exito){
      exito = despliegue(remotes.produccion2B,2,2,repo)
      if(!exito){
        site2Error = despliegue(remotes.produccion2C,3,2,repo)
      }
    }
    if(site1Error!=null && site1Error != true){
      throw site1Error
    }
    if(site2Error!=null && site2Error !=true){
      throw site2Error
    }
  }
}
task setRollbackDockerIntegracion {
  doLast {
    ssh.run {
      session(remotes.integracion) {
        execute "kubectl rollout undo deployments $deploymentName"
      }      
    }
  }
}
task setRollbackDockerCalidad {
  doLast {
    ssh.run {
      session(remotes.calidad5A) {
        execute "kubectl rollout undo deployments $deploymentName"
      }
    }
  }
}
 
task setRollbackDockerProduccion {
  doLast {
    ssh.run {
      session(remotes.produccion1A) {
        execute "kubectl rollout undo deployments $deploymentName"
      }
      session(remotes.produccion2A) {
        execute "kubectl rollout undo deployments $deploymentName"
      }
    }
  }
}